server {
    server_name glitchtip.${HOSTNAME};
    client_max_body_size 40M;

    # Listen to port 443 on both IPv4 and IPv6.
    listen 443 ssl;
    listen [::]:443 ssl;

    # https://github.com/JonasAlfredsson/docker-nginx-certbot/blob/master/examples/example_server.conf
    # Load the certificate files.
    ssl_certificate         /etc/letsencrypt/live/${HOSTNAME}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/${HOSTNAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${HOSTNAME}/chain.pem;

    # Load the Diffie-Hellman parameter.
    ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;


    location / {
        proxy_pass http://glitchtip-web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

    # attempt to preserve the proto, must be in http context
map $http_x_forwarded_proto $thescheme {
    default $scheme;
    "~https$" https;
}
server {

    server_name ${HOSTNAME};

    # Increased from the default value to allow for a large volume of cookies in request headers
    # Discourse itself tries to minimise cookie size, but we cannot control other cookies set by other tools on the same domain.
    large_client_header_buffers 4 32k;


    # without weak etags we get zero benefit from etags on dynamically compressed content
    # further more etags are based on the file in nginx not sha of data
    # use dates, it solves the problem fine even cross server
    etag off;

    # Listen to port 443 on both IPv4 and IPv6.
    listen 443 ssl;
    listen [::]:443 ssl;

    # https://github.com/JonasAlfredsson/docker-nginx-certbot/blob/master/examples/example_server.conf
    # Load the certificate files.
    ssl_certificate         /etc/letsencrypt/live/${HOSTNAME}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/${HOSTNAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${HOSTNAME}/chain.pem;

    # Load the Diffie-Hellman parameter.
    ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;


    # Increased from the default value to acommodate large cookies during oAuth2 flows
    # like in https://meta.discourse.org/t/x/74060 and large CSP and Link (preload) headers
    proxy_buffer_size 16k;
    proxy_buffers 4 16k;

    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 5;
    gzip_types application/json text/css text/javascript application/x-javascript application/javascript image/svg+xml application/wasm;
    gzip_proxied any;

    server_tokens off;
    keepalive_timeout 65;

    # maximum file upload size (keep up to date when changing the corresponding site setting)
    client_max_body_size 500m;



    location / {
        add_header ETag "";

        location ~ ^/uploads/short-url/ {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Request-Start "t=${msec}";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $thescheme;
            proxy_pass http://web:3000;
            break;
        }

        location ~ ^/(secure-media-uploads/|secure-uploads)/ {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Request-Start "t=${msec}";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $thescheme;
            proxy_pass http://web:3000;
            break;
        }
        location ~* (fonts|assets|plugins|uploads)/.*\.(eot|ttf|woff|woff2|ico|otf)$ {
            expires 1y;
            add_header Cache-Control public,immutable;
            add_header Access-Control-Allow-Origin *;
        }

        location = /srv/status {
            access_log off;
            log_not_found off;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Request-Start "t=${msec}";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $thescheme;
            proxy_pass http://web:3000;
            break;
        }


        # some minimal caching here so we don't keep asking
        # longer term we should increase probably to 1y
        location ~ ^/javascripts/ {
        expires 1d;
        add_header Cache-Control public,immutable;
        add_header Access-Control-Allow-Origin *;
        }

        location ~ ^/assets/(?<asset_path>.+)$ {
        expires 1y;
        # asset pipeline enables this
        # brotli_static on;
        gzip_static on;
        add_header Cache-Control public,immutable;
        # HOOK in asset location (used for extensibility)
        # TODO I don't think this break is needed, it just breaks out of rewrite
        break;
        }

        location ~ ^/plugins/ {
        expires 1y;
        add_header Cache-Control public,immutable;
        add_header Access-Control-Allow-Origin *;
        }

        # cache emojis
        location ~ /images/emoji/ {
        expires 1y;
        add_header Cache-Control public,immutable;
        add_header Access-Control-Allow-Origin *;
        }


    # we need buffering off for message bus
        location /message-bus/ {
            proxy_set_header X-Request-Start "t=${msec}";
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_pass http://web:3000;
            break;
        }
        proxy_set_header Host $http_host;
        proxy_set_header X-Request-Start "t=${msec}";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://web:3000;
    }

}



# https://min.io/docs/minio/linux/integrations/setup-nginx-proxy-with-minio.html
server {
    server_name assets.${HOSTNAME};

    # Listen to port 443 on both IPv4 and IPv6.
    listen 443 ssl;
    listen [::]:443 ssl;


    # Load the certificate files.
    ssl_certificate         /etc/letsencrypt/live/${HOSTNAME}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/${HOSTNAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${HOSTNAME}/chain.pem;

    # Load the Diffie-Hellman parameter.
    ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;


    # To allow special characters in headers
    ignore_invalid_headers off;
    # Allow any size file to be uploaded.
    # Set to a value such as 1000m; to restrict file size to a specific value
    client_max_body_size 0;
    # To disable buffering
    proxy_buffering off;
    proxy_request_buffering off;

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Change the host to assets.minio so that minio picks up the correct bucket
        # We can't have minio locally be at assets.$HOSTNAME because then
        # the s3 bucket URL would be too close to the CDN URL,
        # resulting in some mistaken images ü§∑‚Äç‚ôÄÔ∏è
        proxy_set_header Host assets.minio;

        proxy_connect_timeout 300;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding off;

        proxy_pass http://minio;
    }
}

server {
    # Drop any request that does not match any of the other server names.
    listen               443 ssl default_server;
    ssl_reject_handshake on;
}
