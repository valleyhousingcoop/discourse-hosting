x-glitchtip-environment:
  &glitchtip-environment
  DATABASE_URL: postgres://postgres:password@db:5432/glitchtip
  SECRET_KEY: ${SECRET_KEY}
  PORT: 8000
  EMAIL_BACKEND: anymail.backends.sendgrid.EmailBackend
  SENDGRID_API_KEY: ${SEND_GRID_API_KEY}
  GLITCHTIP_DOMAIN: https://glitchtip.${HOSTNAME}
  DEFAULT_FROM_EMAIL: glitchtip@${HOSTNAME}
  REDIS_HOST: redis
  REDIS_PASSWORD: password
x-glitchtip-depends_on:
  &glitchtip-depends_on
  - db
  - redis

services:
  glitchtip-web:
    image: glitchtip/glitchtip
    depends_on: *glitchtip-depends_on
    ports:
      - "8000"
    environment: *glitchtip-environment
    restart: unless-stopped
  glitchtip-worker:
    image: glitchtip/glitchtip
    command: ./bin/run-celery-with-beat.sh
    depends_on: *glitchtip-depends_on
    environment: *glitchtip-environment
    restart: unless-stopped
  glitchtip-migrate:
    image: glitchtip/glitchtip
    depends_on: *glitchtip-depends_on
    command: "./manage.py migrate"
    environment: *glitchtip-environment
  db:
    build:
      context: .
      dockerfile: db.Dockerfile
    environment:
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  redis:
    image: redis/redis-stack:latest
    ports:
      - "8001:8001"
      - "6379:6379"
    environment:
        REDIS_ARGS: --requirepass password
    volumes:
      - redis:/data
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DISCOURSE_HOSTNAME=${HOSTNAME}
        - DISCOURSE_S3_CDN_URL=https://assets.${HOSTNAME}
    environment:
      - DISCOURSE_DB_HOST=db
      - DISCOURSE_DB_PORT=5432
      - DISCOURSE_DB_NAME=postgres
      - DISCOURSE_DB_USERNAME=postgres
      - DISCOURSE_DB_PASSWORD=password
      - DISCOURSE_REDIS_HOST=redis
      - DISCOURSE_REDIS_PASSWORD=password
      - DISCOURSE_DEVELOPER_EMAILS=${EMAIL}
      - DISCOURSE_SMTP_DOMAIN=${HOSTNAME}
      - DISCOURSE_SMTP_PASSWORD=${SEND_GRID_API_KEY}
      - DISCOURSE_NOTIFICATION_EMAIL=notify@${HOSTNAME}
      - DISCOURSE_S3_ACCESS_KEY_ID=minioadmin
      - DISCOURSE_S3_SECRET_ACCESS_KEY=minioadmin
      - DISCOURSE_S3_BUCKET=assets
      - DISCOURSE_S3_BACKUP_BUCKET=backup
      - DISCOURSE_BACKUP_LOCATION=s3
      - DISCOURSE_S3_ENDPOINT=http://${HOSTNAME}
      - SENTRY_DSN=${DSN}
    depends_on:
      - db
      - redis
      - minio
  # Reverse proxy to differentiate based on domain, which server to use
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    ports:
      - 80:80
      - 443:443
    environment:
       - HOSTNAME=${HOSTNAME}
       - CERTBOT_EMAIL=${EMAIL}
       - CERTBOT_DNS_PROPAGATION_SECONDS=60
    depends_on:
      - web
      - minio
    volumes:
      - letsencrypt:/etc/letsencrypt
  minio:
    build:
      context: .
      dockerfile: minio.Dockerfile
    ports:
      - "9001:9001"
    volumes:
      - minio:/data
    environment:
      MINIO_DOMAIN: "${HOSTNAME:?err}"
    networks:
      default:
        aliases:
          - assets.${HOSTNAME:?err}
          - backup.${HOSTNAME:?err}

networks:
  default:
volumes:
  postgres:
  redis:
  minio:
  letsencrypt:
