x-glitchtip:
  &glitchtip
  image: glitchtip/glitchtip
  environment:
    DATABASE_URL: postgres://postgres:password@db:5432/glitchtip
    SECRET_KEY: ${SECRET_KEY}
    PORT: 80
    EMAIL_BACKEND: anymail.backends.sendgrid.EmailBackend
    SENDGRID_API_KEY: ${SEND_GRID_API_KEY}
    GLITCHTIP_DOMAIN: https://glitchtip.${HOSTNAME}
    DEFAULT_FROM_EMAIL: glitchtip@${HOSTNAME}
    REDIS_HOST: redis
    REDIS_PASSWORD: password
  depends_on:
    - db
    - redis

x-discourse:
  &discourse
  build:
    context: .
    dockerfile: Dockerfile
    args:
      - DISCOURSE_HOSTNAME=${HOSTNAME}
      - DISCOURSE_S3_CDN_URL=https://assets.${HOSTNAME}
      - SENTRY_DSN=${DSN}
  env_file:
    - .env
    - discourse.env
  depends_on:
    - db
    - redis
    - minio
    - glitchtip-web
  image: discourse/v3.1.0.beta3
services:
  glitchtip-web:
    <<: *glitchtip
    ports:
      - "80"
    restart: always
  glitchtip-worker:
    <<: *glitchtip
    command: ./bin/run-celery-with-beat.sh
    restart: always
  glitchtip-migrate:
    <<: *glitchtip
    command: "./manage.py migrate"
  db:
    restart: always
    build:
      context: .
      dockerfile: db.Dockerfile
    environment:
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  redis:
    restart: always
    image: redis/redis-stack:latest
    ports:
      - "8001:8001"
      - "6379:6379"
    environment:
        REDIS_ARGS: --requirepass password
    volumes:
      - redis:/data
  web:
    <<: *discourse
    restart: always
    # Set max memory to 2gb so its restarted every when it exceeds that
    # This is to prevent memory leaks
    mem_limit: 2g
  migrate:
    <<: *discourse
    command: bundle exec rake --trace db:migrate
  upload_assets:
    <<: *discourse
    command: bundle exec rake --trace s3:upload_assets
  install_themes:
    <<: *discourse
    command: |
      bundle exec rake --trace themes:install -- '--{"discourse-wikified-posts": "https://github.com/nathan-nz/discourse-wikified-posts"}'

  nginx:
    restart: always
    build:
      context: .
      dockerfile: nginx.Dockerfile
      args:
        - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    ports:
      - 80:80
      - 443:443
    environment:
       - HOSTNAME=${HOSTNAME}
       - CERTBOT_EMAIL=${EMAIL}
       - CERTBOT_DNS_PROPAGATION_SECONDS=60
    depends_on:
      - web
      - minio
    volumes:
      - letsencrypt:/etc/letsencrypt
    networks:
      default:
        aliases:
          - assets.${HOSTNAME:?err}
          - glitchtip.${HOSTNAME:?err}
          - ${HOSTNAME:?err}
  minio:
    restart: always
    build:
      context: .
      dockerfile: minio.Dockerfile
    ports:
      - "9001:9001"
    volumes:
      - minio:/data
    environment:
      MINIO_DOMAIN: minio
    networks:
      default:
        aliases:
          - assets.minio
          - backup.minio
  ddclient:
    restart: always
    build:
      context: .
      dockerfile: ddclient.Dockerfile
      args:
        - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
        - HOSTNAME=${HOSTNAME}
        - CLOUDFLARE_ZONE=${CLOUDFLARE_ZONE}
  mail-reciever:
    image: discourse/mail-receiver:release
    restart: always
    ports:
      - "25"
    volumes:
      - postfix:/var/spool/postfix
    environment:
      - MAIL_DOMAIN=${HOSTNAME}
      - DISCOURSE_API_KEY=${DISCOURSE_API_KEY}
      - DISCOURSE_BASE_URL=https://${HOSTNAME}
      - DISCOURSE_API_USERNAME=system
      - POSTCONF_message_size_limit=102400000
      - SOCKETEE_RELAY_SOCKET=true
    depends_on:
      - nginx
  email-relay:
    restart: always
    build:
      context: .
      dockerfile: email-relay.Dockerfile
    environment:
      - SENTRY_DSN=${DSN}
    ports:
      - "8080:8080"
    depends_on:
      - mail-reciever
      - nginx
  test-email:
    build:
      context: .
      dockerfile: test-email.Dockerfile
    environment:
      - FROM_ADDRESS=${EMAIL}
      - TO_ADDRESS=${TEST_EMAIL_ADDRESS}
    depends_on:
      - mail-reciever
networks:
  default:
volumes:
  postgres:
  redis:
  minio:
  letsencrypt:
  postfix:
