x-glitchtip:
  &glitchtip
  image: glitchtip/glitchtip
  environment:
    DATABASE_URL: postgres://postgres:password@db:5432/glitchtip
    SECRET_KEY: ${SECRET_KEY}
    PORT: 80
    EMAIL_BACKEND: anymail.backends.sendgrid.EmailBackend
    SENDGRID_API_KEY: ${SEND_GRID_API_KEY}
    GLITCHTIP_DOMAIN: https://glitchtip.${HOSTNAME}
    DEFAULT_FROM_EMAIL: glitchtip@${HOSTNAME}
    REDIS_HOST: redis
    REDIS_PASSWORD: password
  depends_on:
    - db
    - redis

x-discourse:
  &discourse
  build:
    context: .
    dockerfile: Dockerfile
    args:
      - DISCOURSE_HOSTNAME=${HOSTNAME}
      - DISCOURSE_S3_CDN_URL=https://assets.${HOSTNAME}
  env_file:
    - .env
    - discourse.env
  environment:
    - SENTRY_DSN=${DSN}
  depends_on:
    - db
    - redis
    - minio
    - glitchtip-web

services:
  glitchtip-web:
    <<: *glitchtip
    ports:
      - "80"
    restart: always
    networks:
      default:
        aliases:
          - glitchtip.${HOSTNAME}
  glitchtip-worker:
    <<: *glitchtip
    command: ./bin/run-celery-with-beat.sh
    restart: always
  glitchtip-migrate:
    <<: *glitchtip
    command: "./manage.py migrate"
  db:
    restart: always
    build:
      context: .
      dockerfile: db.Dockerfile
    environment:
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  redis:
    restart: always
    image: redis/redis-stack:latest
    ports:
      - "8001:8001"
      - "6379:6379"
    environment:
        REDIS_ARGS: --requirepass password
    volumes:
      - redis:/data
  web:
    <<: *discourse
    restart: always
  migrate:
    <<: *discourse
    command: bundle exec rake --trace db:migrate
  upload_assets:
    <<: *discourse
    command: bundle exec rake --trace s3:upload_assets
  install_themes:
    <<: *discourse
    command: |
      bundle exec rake --trace themes:install -- '--{"discourse-kanban-theme": "https://github.com/discourse/discourse-kanban-theme"}'

  nginx:
    restart: always
    build:
      context: .
      dockerfile: nginx.Dockerfile
    ports:
      - 80:80
      - 443:443
    environment:
       - HOSTNAME=${HOSTNAME}
       - CERTBOT_EMAIL=${EMAIL}
       - CERTBOT_DNS_PROPAGATION_SECONDS=60
    depends_on:
      - web
      - minio
    volumes:
      - letsencrypt:/etc/letsencrypt
  minio:
    restart: always
    build:
      context: .
      dockerfile: minio.Dockerfile
    ports:
      - "9001:9001"
    volumes:
      - minio:/data
    environment:
      MINIO_DOMAIN: "${HOSTNAME:?err}"
    networks:
      default:
        aliases:
          - assets.${HOSTNAME:?err}
          - backup.${HOSTNAME:?err}

networks:
  default:
volumes:
  postgres:
  redis:
  minio:
  letsencrypt:
